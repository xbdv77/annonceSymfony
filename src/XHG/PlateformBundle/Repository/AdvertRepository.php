<?php

namespace XHG\PlateformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{

    public function getAdvertWithCategories(array $categories)
    {
        $qb = $this->createQueryBuilder('a')
                ->innerJoin('a.categories', 'cat')
                ->addSelect('cat');
        $qb->where($qb->expr()->in('cat.name', $categories));

        return $qb->getQuery()->getResult();
    }

    public function getLastAdvert($max = 1)
    {
        $qb = $this->createQueryBuilder('a')
                ->orderBy('a.date', 'DESC')
                ->setMaxResults($max);

        return $qb->getQuery()->getResult();
    }

    public function getAllAdverts()
    {
        $qb = $this->createQueryBuilder('a')
                ->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.categories', 'c')
                ->addSelect('c')
                ->orderBy('a.date', 'DESC')
                ->getQuery();

        return $qb->getResult();

        $this->findBy($criteria, $orderBy, $limit, $offset);
    }

    public function getAdverts($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('a')
                ->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.categories', 'c')
                ->addSelect('c')
                ->orderBy('a.date', 'DESC')
                ->getQuery();

        // On définit l'annonce à partir de laquelle commencer la liste
        $query->setFirstResult(($page - 1) * $nbPerPage)
                // Ainsi que le nombre d'annonce à afficher sur une page
                ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function getAdvertsBefore(\Datetime $date)
    {
        return $this->createQueryBuilder('a')
                        ->leftJoin('a.image', 'i')
                        ->addSelect('i')
                        ->where('a.updated_at <= :date')
                        ->orWhere('a.updated_at IS NULL AND a.date <= :date')
                        ->andWhere('a.applications IS EMPTY')
                        ->setParameter('date', $date)
                        ->getQuery()
                        ->getResult()
        ;
    }

}
